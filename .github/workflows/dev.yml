# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "develop" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "develop", "infra-270-1" ]

# 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용합니다.
permissions:
  contents: read

jobs:
  build:
    name: Build and Push to Docker Repository
    runs-on: ubuntu-latest

    steps:
    # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
    - uses: actions/checkout@v3

    # jdk 배포판 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: "corretto"

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Grant execute permission for gradlew
      run: | 
        chmod +x gradlew

    - name: Build with Gradle Wrapper
      env:
        MARIA_URL: ${{ secrets.MARIA_URL }}
        MARIA_USER: ${{ secrets.MARIA_USER }}
        MARIA_PASSWORD: ${{ secrets.MARIA_PASSWORD }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        ./gradlew clean build -x test -x asciidoctor

    # Dockerfile을 통해 이미지 빌드
    - name: Docker Build
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f docker/Dockerfile -t ${{ secrets.DOCKER_REPO }}/veganlife-dev .

    # Docker hub에 업로드
    - name: Push to Docker Repo
      run: |
        docker push ${{ secrets.DOCKER_REPO }}/veganlife-dev

  deploy:
    needs: build
    name: Deploy Server via SSH
    runs-on: ubuntu-latest

    steps:
      - name: Configure SSH
        run: |
          echo "Configure SSH"
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/veganlife-dev.key
          chmod 600 ~/.ssh/veganlife-dev.key
          cat >>~/.ssh/config <<END
          Host veganlife-dev
            HostName $SSH_HOST
            User $SSH_USERNAME
            IdentityFile ~/.ssh/veganlife-dev.key
            StrictHostKeyChecking no
          END
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Move to Workspace
        run: |
          ssh veganlife-dev 'cd veganlife-dev'
          ssh veganlife-dev 'ls -al'

      - name: Docker Compose Down
        run: |
          echo "Docker Compose Down"
          ssh veganlife-dev 'docker compose down --rmi all'

      - name: Set Docker Networks
        run: |
          echo "Set Docker Networks"
          ssh veganlife-dev 'docker network rm deploy'
          ssh veganlife-dev 'docker network create deploy'

      - name: Docker Compose Up
        run: |
          echo "Docker Compose Up"
          ssh veganlife-dev 'cd veganlife-dev'
          ssh veganlife-dev 'docker compose up -d'

