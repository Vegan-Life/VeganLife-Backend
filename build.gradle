plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.diffplug.spotless' version '6.11.0'
    id 'jacoco'
}

group = 'com.konggogi'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

spotless {
    java {
        target("**/*.java")
        googleJavaFormat().aosp()
        indentWithSpaces(4)
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('jacocoReport')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // spring rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // RDB
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // spring actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // map struct
    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // thymeleaf (for restdocs)
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // rest assured
    testImplementation 'io.rest-assured:rest-assured:5.3.2'

    //QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir
    finalizedBy jacocoTestReport
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

bootJar { // jar의 templates에 문서 복사
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}") {
        into 'BOOT-INF/classes/templates'
    }
}

//jacoco setting

jacocoTestReport {
    reports {
        html.required  = true
        xml.required  = false
        csv.required  = false
    }
    excludedClassFilesForReport(classDirectories)
    dependsOn test
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    excludedClassFilesForReport(classDirectories)
    violationRules {
        rule {
            element = 'CLASS'
            enabled = true

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                //minimum = 0.90
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                //minimum = 0.90
            }
        }
    }
}

private excludedClassFilesForReport(classDirectories) {
    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "com/konggogi/veganlife/global/**/*",
                        "com/konggogi/veganlife/**/dto/**",
                        "**/OauthService.class",
                        "**/OauthService\$*.*",
                        "**/*domain*/**",
                        "**/*Dto*",
                        "**/*Request*",
                        "**/*Response*",
                        "**/*Interceptor*",
                        "**/*Application*",
                        "**/*Mapper*",
                        "**/*Exception*"
                ])
            })
    )
}

//Querydsl setting
def generatedDir = layout.buildDirectory.dir("/generated")

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generatedDir))
}
